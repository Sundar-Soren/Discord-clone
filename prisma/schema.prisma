// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique
  name     String
  imageUrl String
  email    String

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  serverId String
  server   Server @relation(fields: [serverId], references: [id])

  messages       Message[]
  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Conversation Conversation[]
  // Conversation Conversation[]
  // Conversation Conversation[]
  Conversation Conversation[]
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  serverId String
  server   Server @relation(fields: [serverId], references: [id])

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?
  deleted Boolean @default(false)

  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  memberOneId String
  memberTwoId String

  // memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id])
  // memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id])

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Member    Member?  @relation(fields: [memberId], references: [id])
  memberId  String?  @db.ObjectId
}

model DirectMessage {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?
  deleted Boolean @default(false)

  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
